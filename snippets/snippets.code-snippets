{
  "Create TFC component": {
    "prefix": "tfc",
    "body": [
      "import React from 'react';",
      "",
      "type $1Props {}",
      "",
      "export const $1 = ({ }: $1Props) => {",
      "  return <>TS FC Component</>;",
      "};"
    ],
    "description": "Create react functional TS component"
  },
  "Create TFC component with hooks": {
    "prefix": "tfch",
    "body": [
      "import React, { useEffect, useState } from 'react';",
      "",
      "type $1Props {}",
      "",
      "export const $1: $1Props = () => {",
      "  const [state, setState] = useState();",
      "",
      "  useEffect(() => {}, []);",
      "",
      "  return <>TS FC Component with hooks</>;",
      "};"
    ],
    "description": "Create react functional TS component with hooks"
  },
  "Print JSX data": {
    "prefix": "jsxpr",
    "body": ["<pre>{JSON.stringify($1, null, 2)}</pre>"],
    "description": "Print JSX data for testing"
  },
  "JSX map an array": {
    "prefix": "jsxmap",
    "body": ["{$1.map(item => (", " <div key={item.id}></div>", "))}"],
    "description": "Map array in jsx"
  },
  "JSX map an array with Fragment": {
    "prefix": "jsxmapr",
    "body": [
      "{$1.map(item => (",
      " <React.Fragment key={item.id}></React.Fragment>",
      "))}"
    ],
    "description": "Map array with fragment in jsx"
  }
}
